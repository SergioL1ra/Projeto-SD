$date
	Wed Apr 02 20:38:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cpu $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 # reg_write $end
$var wire 1 " reset $end
$var wire 5 $ write_reg [4:0] $end
$var wire 32 % sign_ext_imm [31:0] $end
$var wire 5 & rt [4:0] $end
$var wire 5 ' rs [4:0] $end
$var wire 1 ( reg_dst $end
$var wire 32 ) read_data2 [31:0] $end
$var wire 32 * read_data1 [31:0] $end
$var wire 5 + rd [4:0] $end
$var wire 32 , pc_out [31:0] $end
$var wire 32 - pc_in [31:0] $end
$var wire 6 . opcode [5:0] $end
$var wire 32 / instr [31:0] $end
$var wire 16 0 imm [15:0] $end
$var wire 6 1 funct [5:0] $end
$var wire 32 2 alu_src2 [31:0] $end
$var wire 1 3 alu_src $end
$var wire 32 4 alu_result [31:0] $end
$var wire 2 5 alu_op [1:0] $end
$var wire 4 6 alu_control [3:0] $end
$scope module alu0 $end
$var wire 32 7 input2 [31:0] $end
$var wire 1 8 zero $end
$var wire 32 9 input1 [31:0] $end
$var wire 4 : alu_control [3:0] $end
$var reg 32 ; result [31:0] $end
$upscope $end
$scope module alu_ctrl $end
$var wire 2 < alu_op [1:0] $end
$var wire 6 = funct [5:0] $end
$var reg 4 > alu_control [3:0] $end
$upscope $end
$scope module imem $end
$var wire 32 ? instr [31:0] $end
$var wire 32 @ addr [31:0] $end
$upscope $end
$scope module pc0 $end
$var wire 1 ! clk $end
$var wire 32 A pc_in [31:0] $end
$var wire 1 " reset $end
$var reg 32 B pc_out [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 ! clk $end
$var wire 32 C read_data1 [31:0] $end
$var wire 32 D read_data2 [31:0] $end
$var wire 5 E read_reg1 [4:0] $end
$var wire 5 F read_reg2 [4:0] $end
$var wire 32 G reg_t2 [31:0] $end
$var wire 1 # reg_write $end
$var wire 32 H write_data [31:0] $end
$var wire 5 I write_reg [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1000 I
bx H
bx G
b1000 F
b0 E
bx D
bx C
b0 B
b100 A
b0 @
b100000000010000000000000000101 ?
b10 >
b101 =
b0 <
bx ;
b10 :
bx 9
08
b101 7
b10 6
b0 5
bx 4
13
b101 2
b101 1
b101 0
b100000000010000000000000000101 /
b1000 .
b100 -
b0 ,
b0 +
bx *
bx )
0(
b0 '
b1000 &
b101 %
b1000 $
1#
1"
0!
$end
#5000
b101 4
b101 ;
b101 H
b0 *
b0 9
b0 C
1!
#10000
0!
0"
#15000
b1010 4
b1010 ;
b1010 H
b1010 2
b1010 7
b1001 $
b1001 I
b1010 1
b1010 =
b1010 %
b1010 0
b1001 &
b1001 F
b100000000010010000000000001010 /
b100000000010010000000000001010 ?
b1000 -
b1000 A
b100 ,
b100 @
b100 B
bx )
bx D
1!
#20000
0!
#25000
b1111 4
b1111 ;
b1111 H
b1010 $
b1010 I
b10 5
b10 <
b100000 1
b100000 =
b101000000100000 %
b101000000100000 0
b1010 +
b101 *
b101 9
b101 C
b1000 '
b1000 E
03
1(
b0 .
b1000010010101000000100000 /
b1000010010101000000100000 ?
b1100 -
b1100 A
b1000 ,
b1000 @
b1000 B
b1010 )
b1010 D
1!
#30000
0!
#35000
18
b0 6
b0 :
b0 >
b0 $
b0 I
b0 2
b0 7
b0 4
b0 ;
b0 H
b0 1
b0 =
b0 %
b0 0
b0 +
b0 )
b0 D
b0 &
b0 F
b0 *
b0 9
b0 C
b0 '
b0 E
b0 /
b0 ?
b10000 -
b10000 A
b1100 ,
b1100 @
b1100 B
b1111 G
1!
#40000
0!
#45000
b10100 -
b10100 A
b10000 ,
b10000 @
b10000 B
1!
#50000
0!
#55000
b11000 -
b11000 A
b10100 ,
b10100 @
b10100 B
1!
#60000
0!
#65000
b11100 -
b11100 A
b11000 ,
b11000 @
b11000 B
1!
#70000
0!
#75000
b100000 -
b100000 A
b11100 ,
b11100 @
b11100 B
1!
#80000
0!
#85000
08
bx 4
bx ;
bx H
bx 2
bx 7
bx $
bx I
bx 5
bx <
bx 1
bx =
bx %
bx 0
bx +
bx )
bx D
bx &
bx F
bx *
bx 9
bx C
bx '
bx E
x3
x(
bx .
bx /
bx ?
b100100 -
b100100 A
b100000 ,
b100000 @
b100000 B
1!
#90000
0!
#95000
b101000 -
b101000 A
b100100 ,
b100100 @
b100100 B
1!
#100000
0!
#105000
b101100 -
b101100 A
b101000 ,
b101000 @
b101000 B
1!
#110000
0!
