$date
	Wed Apr 09 14:38:58 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cpu $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # branch_taken $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 $ zero $end
$var wire 5 % write_reg [4:0] $end
$var wire 32 & write_data [31:0] $end
$var wire 32 ' sign_ext_imm [31:0] $end
$var wire 5 ( rt [4:0] $end
$var wire 5 ) rs [4:0] $end
$var wire 1 * reg_write $end
$var wire 1 + reg_dst $end
$var wire 32 , read_data2 [31:0] $end
$var wire 32 - read_data1 [31:0] $end
$var wire 5 . rd [4:0] $end
$var wire 32 / pc_out [31:0] $end
$var wire 32 0 pc_in [31:0] $end
$var wire 6 1 opcode [5:0] $end
$var wire 1 2 mem_write $end
$var wire 1 3 mem_to_reg $end
$var wire 1 4 mem_read $end
$var wire 32 5 mem_data [31:0] $end
$var wire 32 6 jump_addr [31:0] $end
$var wire 1 7 jump $end
$var wire 32 8 instr [31:0] $end
$var wire 16 9 imm [15:0] $end
$var wire 6 : funct [5:0] $end
$var wire 32 ; branch_addr [31:0] $end
$var wire 1 < branch $end
$var wire 32 = alu_src2 [31:0] $end
$var wire 1 > alu_src $end
$var wire 32 ? alu_result [31:0] $end
$var wire 2 @ alu_op [1:0] $end
$var wire 4 A alu_control [3:0] $end
$scope module alu0 $end
$var wire 32 B input2 [31:0] $end
$var wire 1 $ zero $end
$var wire 32 C input1 [31:0] $end
$var wire 4 D alu_control [3:0] $end
$var reg 32 E result [31:0] $end
$upscope $end
$scope module alu_ctrl $end
$var wire 6 F funct [5:0] $end
$var wire 2 G alu_op [1:0] $end
$var reg 4 H alu_control [3:0] $end
$upscope $end
$scope module control_unit $end
$var wire 6 I opcode [5:0] $end
$var reg 2 J alu_op [1:0] $end
$var reg 1 > alu_src $end
$var reg 1 < branch $end
$var reg 1 7 jump $end
$var reg 1 4 mem_read $end
$var reg 1 3 mem_to_reg $end
$var reg 1 2 mem_write $end
$var reg 1 + reg_dst $end
$var reg 1 * reg_write $end
$upscope $end
$scope module dmem $end
$var wire 32 K addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 4 mem_read $end
$var wire 1 2 mem_write $end
$var wire 32 L write_data [31:0] $end
$var reg 32 M read_data [31:0] $end
$scope begin $unm_blk_12 $end
$var integer 32 N i [31:0] $end
$upscope $end
$upscope $end
$scope module imem $end
$var wire 32 O instr [31:0] $end
$var wire 32 P addr [31:0] $end
$upscope $end
$scope module pc0 $end
$var wire 1 ! clk $end
$var wire 32 Q pc_in [31:0] $end
$var wire 1 " reset $end
$var reg 32 R pc_out [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 ! clk $end
$var wire 32 S read_data1 [31:0] $end
$var wire 32 T read_data2 [31:0] $end
$var wire 5 U read_reg1 [4:0] $end
$var wire 5 V read_reg2 [4:0] $end
$var wire 32 W reg_t2 [31:0] $end
$var wire 1 * reg_write $end
$var wire 32 X write_data [31:0] $end
$var wire 5 Y write_reg [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1000 Y
bx X
bx W
b1000 V
b0 U
bx T
bx S
b0 R
b100 Q
b0 P
b100000000010000000000000000101 O
b1000000 N
b0 M
bx L
bx K
b0 J
b1000 I
b10 H
b0 G
b101 F
bx E
b10 D
bx C
bx B
b10 A
b0 @
bx ?
0>
bx =
0<
b11000 ;
b101 :
b101 9
b100000000010000000000000000101 8
07
b1000000000000000010100 6
b0 5
04
03
02
b1000 1
b100 0
b0 /
b0 .
bx -
bx ,
0+
0*
b0 )
b1000 (
b101 '
bx &
b1000 %
0$
0#
1"
0!
$end
#5000
b0 -
b0 C
b0 S
1!
#10000
0!
0"
#15000
b1001 %
b1001 Y
b1001000000000000101000 6
b1010 :
b1010 F
b1010 '
b1010 9
b1001 (
b1001 V
b1000 0
b1000 Q
b100000000010010000000000001010 8
b100000000010010000000000001010 O
b110000 ;
b100 /
b100 P
b100 R
1!
#20000
0!
#25000
b0 &
b0 X
1$
b0 ?
b0 E
b0 K
b0 =
b0 B
b1000 %
b1000 Y
12
1>
b1000000000000000000000 6
b0 :
b0 F
b0 '
b0 9
b1000 (
b1000 V
b101011 1
b101011 I
b1100 0
b1100 Q
b10101100000010000000000000000000 8
b10101100000010000000000000000000 O
b1100 ;
b1000 /
b1000 P
b1000 R
1!
#30000
0!
#35000
bx &
bx X
bx 5
bx M
b1010 %
b1010 Y
02
14
1*
13
b1010000000000000000000 6
b1010 (
b1010 V
b100011 1
b100011 I
b10000 0
b10000 Q
b10001100000010100000000000000000 8
b10001100000010100000000000000000 O
b10000 ;
b1100 /
b1100 P
b1100 R
1!
#40000
0!
#45000
b0x &
b0x X
b0 5
b0 M
b111 A
b111 D
b111 H
bx =
bx B
b1011 %
b1011 Y
0$
b0x ?
b0x E
b0x K
b10 @
b10 G
b10 J
04
03
0>
1+
b100001001010110000010101000 6
b101010 :
b101010 F
b101100000101010 '
b101100000101010 9
b1011 .
b1001 (
b1001 V
bx -
bx C
bx S
b1000 )
b1000 U
b0 1
b0 I
b10100 0
b10100 Q
b1000010010101100000101010 8
b1000010010101100000101010 O
b10110000010111100 ;
b10000 /
b10000 P
b10000 R
1!
#50000
0!
#55000
bx &
bx X
bx ?
bx E
bx K
b110 A
b110 D
b110 H
b0 %
b0 Y
b0 =
b0 B
b1 @
b1 G
b1 J
1<
0*
0+
b101100000000000000000000100 6
b1 :
b1 F
b1 '
b1 9
b0 .
b0 ,
b0 L
b0 T
b0 (
b0 V
b0x -
b0x C
b0x S
b1011 )
b1011 U
b100 1
b100 I
b11000 0
b11000 Q
b10001011000000000000000000001 8
b10001011000000000000000000001 O
b11100 ;
b10100 /
b10100 P
b10100 R
1!
#60000
0!
#65000
b10 A
b10 D
b10 H
b1100 %
b1100 Y
bx =
bx B
b10 @
b10 G
b10 J
0<
1*
1+
b100101010011000000010000000 6
b100000 :
b100000 F
b110000000100000 '
b110000000100000 9
b1100 .
bx ,
bx L
bx T
b1010 (
b1010 V
bx -
bx C
bx S
b1001 )
b1001 U
b0 1
b0 I
b11100 0
b11100 Q
b1001010100110000000100000 8
b1001010100110000000100000 O
b11000000010011100 ;
b11000 /
b11000 P
b11000 R
1!
#70000
0!
#75000
b110 A
b110 D
b110 H
b1111 %
b1111 Y
b100101000011110000010001000 6
b100010 :
b100010 F
b111100000100010 '
b111100000100010 9
b1111 .
b1000 (
b1000 V
b100000 0
b100000 Q
b1001010000111100000100010 8
b1001010000111100000100010 O
b11110000010101000 ;
b11100 /
b11100 P
b11100 R
1!
#80000
0!
#85000
b10 A
b10 D
b10 H
bx %
bx Y
b0 @
b0 G
b0 J
0*
0+
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 6
bx :
bx F
bx '
bx 9
bx .
bx (
bx V
bx )
bx U
bx 1
bx I
b100100 0
b100100 Q
bx 8
bx O
bx ;
b100000 /
b100000 P
b100000 R
1!
#90000
0!
#95000
b101000 0
b101000 Q
b100100 /
b100100 P
b100100 R
1!
#100000
0!
#105000
b101100 0
b101100 Q
b101000 /
b101000 P
b101000 R
1!
#110000
0!
